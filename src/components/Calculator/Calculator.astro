---
import { colorLuminance } from "../../helpers";
import type { HexColor } from "../../types/CssColor";
import ButtonGrid from "./ButtonGrid.astro";
import Screen from "./Screen.astro";
import Slider from "./Slider.astro";

interface Props {
  lightBackgroundColor: HexColor;
  darkBackgroundColor: HexColor;

  lightTextColor: HexColor;
  darkTextColor: HexColor;
}

const { ...props } = Astro.props;
---

<div id="calculator" class="calculator standalone">
  <Screen />
  <Slider label="Temperature" min={0} max={2} step={0.1} value={1} />
  <Slider label="Top P" min={0} max={1} step={0.1} value={1} />
  <ButtonGrid {...props} />
</div>

<script>
  const calculator = document.getElementById("calculator")!;
  const mathInput = document.getElementById(
    "math-input",
  ) as HTMLTextAreaElement;
  const mathOutput = document.getElementById("math-output") as HTMLInputElement;
  const buttons = calculator.getElementsByClassName(
    "button",
  ) as HTMLCollectionOf<HTMLButtonElement>;

  for (const button of buttons) {
    button.addEventListener("click", () => handleClick(button));
  }

  function handleClick(button: HTMLButtonElement) {
    const value = button.dataset.value;

    switch (value) {
      case "=":
        mathOutput.value = "";
        break;
      case "clear":
        mathInput.value = "";
        mathOutput.value = "";
        break;
      case "backspace":
        mathInput.value = mathInput.value.slice(0, -1);
        mathOutput.value = "";
        break;
      case "retry":
        mathOutput.value = "";
        break;
      default:
        mathInput.value += value;
        mathOutput.value = "";
    }
    mathInput.focus();
  }
</script>

<style>
  #calculator {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: stretch;

    width: var(--calculatorWidth);
    height: max(100vh, calc(848 / 400 * var(--calculatorWidth)));
    margin: auto;
    padding: var(--calculatorGap);
    box-sizing: border-box;

    font-feature-settings: "tnum", "cv03", "cv04", "calt";
  }

  #calculator.standalone {
    border-radius: calc(var(--buttonBorderRadius) + var(--calculatorGap));

    box-shadow:
      var(--shadowOffset) var(--shadowOffset) var(--blurRadius)
        var(--darkShadowColor),
      calc(var(--shadowOffset) * -1) calc(var(--shadowOffset) * -1)
        var(--blurRadius) var(--lightShadowColor);
  }
</style>
