---
import type { AstroBuiltinAttributes } from "astro";
import type { HexColor } from "../../../types/CssColor";
import cryptoRandomString from "crypto-random-string";
import ModelSelectorOption from "./ModelSelectorOption.astro";
import GPT2DownloadButton from "./GPT2DownloadButton.astro";
import GPT4ApiKeyInput from "./GPT4ApiKeyInput.astro";
import Button from "../../Button.astro";

interface Props {
  lightBackgroundColor: HexColor;
  darkBackgroundColor: HexColor;

  lightTextColor: HexColor;
  darkTextColor: HexColor;

  class?: string;
  "class:list"?: AstroBuiltinAttributes["class:list"];
}

const { class: className, "class:list": classList, ...props } = Astro.props;

const id = cryptoRandomString({ length: 4, type: "alphanumeric" });
---

<div class:list={["overlay", "opened", className, classList]}>
  <fieldset aria-labelledby={id}>
    <div class="top-bar">
      <div id={id} class="label">Pick a model</div>
      <Button
        id="close-model-selector-button"
        lightShadowColor={props.lightBackgroundColor}
        lightGradientColor={props.lightBackgroundColor}
        lightTextColor={props.lightTextColor}
        lightColorDifference={0.15}
        darkShadowColor={props.darkBackgroundColor}
        darkGradientColor={props.darkBackgroundColor}
        darkTextColor={props.darkTextColor}
        darkColorDifference={0.9}
        mini
        padding
        disabled
      >
        Done
      </Button>
    </div>

    <div>
      <ModelSelectorOption name="model" {...props} value="GPT-2" disabled>
        <div>
          A small model that can run on your browser with the <a
            href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API"
            target="_blank"
            rel="noopener noreferrer">WebGPU API</a
          >.
        </div>
        <GPT2DownloadButton {...props} />
      </ModelSelectorOption>
      <ModelSelectorOption name="model" {...props} value="GPT-4" disabled>
        <div>
          A large model that can only run on a server. Paste your <a
            href="https://platform.openai.com/account/api-keys"
            target="_blank"
            rel="noopener noreferrer">OpenAI API key</a
          > below to use it.
        </div>
        <GPT4ApiKeyInput
          placeholder="Enter your API key"
          enterkeyhint="enter"
        />
      </ModelSelectorOption>
    </div>
  </fieldset>
</div>

<script>
  import { closeModelSelectorOverlay } from "./helpers";

  const closeButton = document.getElementById("close-model-selector-button")!;

  closeButton.addEventListener("click", () => {
    closeModelSelectorOverlay();
  });
</script>

<style>
  div.overlay {
    --margin: calc(var(--buttonBorderRadius) * 0.8);

    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;

    z-index: 2;

    width: 100%;
    height: 100%;

    backdrop-filter: blur(15px);
    -webkit-backdrop-filter: blur(15px);

    transition: opacity 250ms ease;

    > fieldset {
      appearance: none;
      margin: 0;
      padding: 0;
      border: none;

      > div.top-bar {
        margin: var(--margin);

        display: flex;
        justify-content: space-between;
        align-items: center;

        > div.label {
          font-size: calc(var(--buttonSize) * 0.4);
          font-weight: 600;
        }
      }
    }

    &.open-from {
      display: block;
      opacity: 0;
      pointer-events: none;
    }

    &.opened {
      display: block;
      opacity: 1;
    }

    &.close-to {
      display: block;
      opacity: 0;
      pointer-events: none;
    }

    &.closed {
      display: none;
      pointer-events: none;
    }
  }
</style>
