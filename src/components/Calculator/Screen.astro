---

---

<div class="screen">
  <textarea id="math-input"></textarea>
  <div id="math-output-container-container">
    <div id="math-output-container">
      <div id="math-output"></div>
    </div>
  </div>
</div>

<script>
  import { mathToDisplayCharacters } from "../../helpers";
  import { predictAnswer } from "./helpers";

  const mathInput = document.getElementById(
    "math-input",
  ) as HTMLTextAreaElement;
  const mathOutputContainerContainer = document.getElementById(
    "math-output-container-container",
  ) as HTMLDivElement;
  const mathOutput = document.getElementById("math-output") as HTMLDivElement;

  mathInput.addEventListener("keydown", (e) => {
    if (e.key == "Enter") {
      e.preventDefault();
      predictAnswer();
    }
  });

  mathInput.addEventListener("input", () => {
    mathInput.value = mathToDisplayCharacters(mathInput.value);
    resizeElFont(mathInput);
    mathOutput.innerText = "";
  });

  const observer = new MutationObserver(() => {
    const newText = mathToDisplayCharacters(mathOutput.innerText);
    if (mathOutput.innerText != newText) {
      mathOutput.innerText = newText;
    }
    resizeElFont(mathOutputContainerContainer);
  });
  observer.observe(mathOutput, {
    childList: true,
  });

  function resizeElFont(el: HTMLElement) {
    el.style.fontSize = "";

    const height = el.clientHeight;
    let scrollHeight = el.scrollHeight;
    const fontSize = window.getComputedStyle(el).getPropertyValue("--fontSize");
    let scale = 1;

    while (scrollHeight > height && scale > 0.4) {
      scale -= 0.01;
      el.style.fontSize = `calc(${scale} * ${fontSize})`;
      scrollHeight = el.scrollHeight;
    }

    el.scrollTop = el.scrollHeight;
  }
</script>

<style>
  .screen {
    --screenPadding: calc(var(--buttonBorderRadius) / 2);
    --fontSize: calc(var(--buttonSize) / 1.6);
    --oneLine: calc(var(--fontSize) * 1.4);
    --oneLineWithPadding: calc(var(--oneLine) + var(--screenPadding));

    flex-grow: 1;

    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: stretch;

    min-height: calc(2 * var(--oneLineWithPadding));
    max-height: calc(3 * var(--oneLine) + 2 * var(--screenPadding));
    overflow: hidden;
    box-sizing: border-box;
    margin-bottom: calc(var(--calculatorGap));
    border-radius: var(--buttonBorderRadius);
    box-shadow:
      inset var(--shadowOffset) var(--shadowOffset) var(--blurRadius)
        var(--darkShadowColor),
      inset calc(var(--shadowOffset) * -1) calc(var(--shadowOffset) * -1)
        var(--blurRadius) var(--lightShadowColor);
  }

  .screen > * {
    width: 100%;
    min-height: var(--oneLineWithPadding);
    box-sizing: border-box;
    margin: 0px;
    padding: var(--screenPadding);
    text-align: right;
    border: none;
    outline: none;
    background: none;
    font-family: inherit;
    font-feature-settings: inherit;
    font-size: var(--fontSize);
    resize: none;
    overflow-x: hidden;
    overflow-y: auto;
  }

  #math-input {
    flex-grow: 1;

    color: inherit;

    border-top-left-radius: calc(var(--buttonBorderRadius));
    border-top-right-radius: calc(var(--buttonBorderRadius));

    padding-bottom: 0;
  }

  #math-output-container-container {
    width: 100%;
    height: var(--oneLineWithPadding);

    overflow: scroll;

    border-bottom-left-radius: calc(
      var(--buttonBorderRadius) - var(--shadowOffset)
    );
    border-bottom-right-radius: calc(
      var(--buttonBorderRadius) - var(--shadowOffset)
    );

    padding-top: 0;
  }

  #math-output-container {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: flex-end;

    width: 100%;
    min-height: 100%;
  }
  #math-output {
    width: 100%;

    text-align: end;

    overflow: visible;
    overflow-wrap: break-word;

    color: #1976d2;

    @media (prefers-color-scheme: dark) {
      color: #2196f3;
    }
  }
</style>
