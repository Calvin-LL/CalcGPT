---
import type { AstroBuiltinAttributes } from "astro";
import GenericButton from "../Button.astro";
import type { HexColor } from "../../types/CssColor";

interface Props {
  type: "number" | "operator" | "equal" | "clear" | "retry";

  lightBackgroundColor: HexColor;
  darkBackgroundColor: HexColor;

  lightTextColor: HexColor;
  darkTextColor: HexColor;

  class?: string;
  "class:list"?: AstroBuiltinAttributes["class:list"];
}

const {
  type,

  lightBackgroundColor,
  darkBackgroundColor,

  lightTextColor: globalLightTextColor,
  darkTextColor: globalDarkTextColor,

  class: className,
  "class:list": classList,

  ...props
} = Astro.props;

const colors = {
  light: {
    number: {
      shadowColor: lightBackgroundColor,
      gradientColor: lightBackgroundColor,
      textColor: globalLightTextColor,
      colorDifference: 0.15,
    },
    operator: {
      shadowColor: lightBackgroundColor,
      gradientColor: lightBackgroundColor,
      textColor: "#1E88E5",
      colorDifference: 0.15,
    },
    equal: {
      shadowColor: "#e4f6fe",
      gradientColor: "#1E88E5",
      textColor: globalDarkTextColor,
      colorDifference: 0.15,
    },
    clear: {
      shadowColor: lightBackgroundColor,
      gradientColor: lightBackgroundColor,
      textColor: "#F44336",
      colorDifference: 0.15,
    },
    retry: {
      shadowColor: lightBackgroundColor,
      gradientColor: lightBackgroundColor,
      textColor: "#388E3C",
      colorDifference: 0.15,
    },
  },
  dark: {
    number: {
      shadowColor: darkBackgroundColor,
      gradientColor: darkBackgroundColor,
      textColor: globalDarkTextColor,
      colorDifference: 0.9,
    },
    operator: {
      shadowColor: darkBackgroundColor,
      gradientColor: darkBackgroundColor,
      textColor: "#2196F3",
      colorDifference: 0.9,
    },
    equal: {
      shadowColor: "#07285a",
      gradientColor: "#1E88E5",
      textColor: globalDarkTextColor,
      colorDifference: 0.9,
    },
    clear: {
      shadowColor: darkBackgroundColor,
      gradientColor: darkBackgroundColor,
      textColor: "#EF5350",
      colorDifference: 0.9,
    },
    retry: {
      shadowColor: darkBackgroundColor,
      gradientColor: darkBackgroundColor,
      textColor: "#4CAF50",
      colorDifference: 0.9,
    },
  },
} as const;

// light theme
const {
  shadowColor: lightShadowColor,
  gradientColor: lightGradientColor,
  textColor: lightTextColor,
  colorDifference: lightColorDifference,
} = colors["light"][type];

// dark theme
const {
  shadowColor: darkShadowColor,
  gradientColor: darkGradientColor,
  textColor: darkTextColor,
  colorDifference: darkColorDifference,
} = colors["dark"][type];

const textFontSizeOverride =
  type === "retry" ? "calc(var(--buttonSize) / 4)" : undefined;
---

<GenericButton
  {...props}
  {...{
    lightShadowColor,
    lightGradientColor,
    lightTextColor,
    lightColorDifference,
    darkShadowColor,
    darkGradientColor,
    darkTextColor,
    darkColorDifference,
    textFontSizeOverride,
  }}
  class:list={[className, classList]}
>
  <slot />
</GenericButton>
