---
import type { HexColor } from "../../types/CssColor";

interface Props {
  lightBackgroundColor: HexColor;
  darkBackgroundColor: HexColor;

  lightTextColor: HexColor;
  darkTextColor: HexColor;

  name: string;
  value: string;
  checked?: boolean;
  disabled?: boolean;
}

const { name, value, checked = false, disabled = false } = Astro.props;
---

<div class="model-option" class:list={[{ disabled }]}>
  <label>
    <span>{value}</span>
    <input
      type="radio"
      name={name}
      value={value}
      checked={checked}
      disabled={disabled}
    />
  </label>
  <div>
    <slot />
  </div>
</div>

<script>
  // add checked class to div.model-option if input is checked
  // and remove checked class if input is not checked
  const inputs = document.querySelectorAll<HTMLInputElement>(
    "div.model-option > label > input",
  );

  // check the child input if the div.model-option is clicked
  const modelOptions =
    document.querySelectorAll<HTMLDivElement>("div.model-option");

  for (const modelOption of modelOptions) {
    modelOption.addEventListener("click", (event: MouseEvent) => {
      if (modelOption.classList.contains("disabled")) {
        return;
      }

      if (
        ["input", "button", "a"].includes(
          (event.target as HTMLElement).tagName.toLowerCase(),
        )
      ) {
        return;
      }

      const input =
        modelOption.querySelector<HTMLInputElement>("label > input")!;

      input.checked = true;

      updateAllRadioInput();
    });
  }

  updateAllRadioInput();

  for (const input of inputs) {
    input.addEventListener("change", () => {
      updateAllRadioInput();
    });
  }

  // have to update every input because only one element emits change event
  function updateAllRadioInput() {
    for (const input of inputs) {
      handleRadioChange(input);
    }
  }

  function handleRadioChange(input: HTMLInputElement) {
    const modelOption = input.closest("div.model-option")!;

    if (input.checked) {
      modelOption.classList.add("checked");
    } else {
      modelOption.classList.remove("checked");
    }
  }
</script>

<style>
  div.model-option {
    --borderColor: rgba(0, 0, 0, 0.05);
    --selectedColor: #1e88e5;

    cursor: pointer;

    position: relative;

    padding: var(--margin);
    overflow: hidden;
    box-sizing: border-box;

    border-width: calc(var(--buttonSize) / 25);
    border-style: solid;
    border-color: var(--borderColor);
    border-radius: var(--borderRadius);

    margin-top: calc(var(--margin) / 3);

    transition: all 150ms ease;
  }

  div.model-option.checked {
    border-color: var(--selectedColor);
  }

  @media (hover: hover) {
    div.model-option:hover {
      background-color: var(--borderColor);
    }
  }

  @media (prefers-color-scheme: dark) {
    div.model-option {
      --borderColor: rgba(255, 255, 255, 0.1);
    }
  }

  div.model-option > label {
    cursor: pointer;

    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  div.model-option > label > span {
    font-size: calc(var(--buttonSize) / 3.5);
    font-weight: 700;
  }

  div.model-option > label > input {
    --borderColor: #999;

    appearance: none;

    border-radius: 50%;
    width: calc(var(--buttonSize) / 3);
    height: calc(var(--buttonSize) / 3);

    border-width: calc(var(--buttonSize) / 25);
    border-style: solid;
    border-color: var(--borderColor);
    transition: all 150ms ease;
  }

  div.model-option > label > input:checked {
    --borderColor: var(--selectedColor);

    border-width: calc(var(--buttonSize) / 9);
  }

  div.model-option > label > input:focus-visible {
    outline-color: orange;
  }
</style>
