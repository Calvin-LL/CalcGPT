---
import type { HexColor } from "../../types/CssColor";
import ButtonGrid from "./ButtonGrid.astro";
import Screen from "./Screen.astro";
import Slider from "./Slider.astro";
import TopBar from "./TopBar/TopBar.astro";

interface Props {
  lightBackgroundColor: HexColor;
  darkBackgroundColor: HexColor;

  lightTextColor: HexColor;
  darkTextColor: HexColor;
}

const { ...props } = Astro.props;
---

<div id="calculator" class="calculator">
  <div class="content">
    <TopBar {...props} />
    <Slider
      class="temperature"
      label="Temperature"
      subLabel="Craziness of the answers"
      min={0}
      max={1}
      actualMax={2}
      step={0.05}
      value={1}
    />
    <Slider class="top-p" label="Top P" min={0} max={1} step={0.05} value={1} />
    <Screen />
    <ButtonGrid {...props} />
  </div>
</div>

<script>
  import type { CalcGPT } from "../../core/CalcGPT";
  import { CalcGPT3 } from "../../core/CalcGPT3";

  declare global {
    var calcGPT: CalcGPT;
  }

  globalThis.calcGPT = new CalcGPT3();
</script>

<script>
  import { predictAnswer } from "./helpers";

  const calculator = document.getElementById("calculator")!;
  const content = calculator.querySelector(".content")!;
  const mathInput = document.getElementById(
    "math-input",
  ) as HTMLTextAreaElement;
  const mathOutput = document.getElementById("math-output") as HTMLDivElement;
  const buttons = content.getElementsByClassName(
    "calc-button",
  ) as HTMLCollectionOf<HTMLButtonElement>;

  for (const button of buttons) {
    button.addEventListener("click", () => handleClick(button));
  }

  function handleClick(button: HTMLButtonElement) {
    const value = button.dataset.value;

    switch (value) {
      case "=":
        mathOutput.innerText = "";
        predictAnswer();
        break;
      case "clear":
        mathInput.value = "";
        mathOutput.innerText = "";
        globalThis.functionQueue.clear();
        break;
      case "backspace":
        mathInput.value = mathInput.value.slice(0, -1);
        mathOutput.innerText = "";
        break;
      case "retry":
        mathOutput.innerText = "";
        predictAnswer();
        break;
      default:
        if (mathOutput.innerText) {
          mathInput.value = "";
        }
        mathInput.value += value;
        mathOutput.innerText = "";
    }
  }
</script>

<style lang="scss">
  #calculator {
    --heightMin: calc(1000 / 400 * var(--calculatorWidth));
    --heightMax: calc(1020 / 400 * var(--calculatorWidth));

    position: relative;

    width: var(--calculatorWidth);
    height: clamp(var(--heightMin), 100lvh, var(--heightMax));
    margin: auto;
    padding: var(--calculatorGap);
    box-sizing: border-box;

    font-size: calc(var(--buttonSize) / 4);
    font-feature-settings: "tnum", "cv03", "cv04", "calt";

    @media (min-width: 461px) {
      --verticalMargin: calc(var(--calculatorGap) * 2);

      height: clamp(
        var(--heightMin),
        calc(100lvh - 2 * var(--verticalMargin)),
        var(--heightMax)
      );

      margin-top: var(--verticalMargin);
      margin-bottom: var(--verticalMargin);

      border-radius: var(--borderRadius);

      box-shadow:
        var(--shadowOffset) var(--shadowOffset) var(--blurRadius)
          var(--darkShadowColor),
        calc(var(--shadowOffset) * -1) calc(var(--shadowOffset) * -1)
          var(--blurRadius) var(--lightShadowColor);

      & > .overlay {
        border-radius: var(--borderRadius);
      }
    }

    & > div.content {
      width: 100%;
      height: 100%;

      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: stretch;
    }
  }
</style>
