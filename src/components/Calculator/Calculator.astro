---
import type { HexColor } from "../../types/CssColor";
import ModelSelectorOverlay from "./ModelSelectorOverlay/ModelSelectorOverlay.astro";
import ButtonGrid from "./ButtonGrid.astro";
import Screen from "./Screen.astro";
import Slider from "./Slider.astro";
import TopBar from "./TopBar/TopBar.astro";

interface Props {
  lightBackgroundColor: HexColor;
  darkBackgroundColor: HexColor;

  lightTextColor: HexColor;
  darkTextColor: HexColor;
}

const { ...props } = Astro.props;
---

<div id="calculator" class="calculator">
  <ModelSelectorOverlay {...props} class="overlay" />
  <div class="content" aria-hidden="true" inert>
    <TopBar {...props} />
    <Slider
      class="temperature"
      label="Temperature"
      min={0}
      max={2}
      step={0.1}
      value={1}
    />
    <Slider class="top-p" label="Top P" min={0} max={1} step={0.05} value={1} />
    <Screen />
    <ButtonGrid {...props} />
  </div>
</div>

<script>
  import { predictAnswer } from "./helpers";

  const calculator = document.getElementById("calculator")!;
  const content = calculator.querySelector(".content")!;
  const mathInput = document.getElementById(
    "math-input",
  ) as HTMLTextAreaElement;
  const mathOutput = document.getElementById("math-output") as HTMLDivElement;
  const buttons = content.getElementsByClassName(
    "calc-button",
  ) as HTMLCollectionOf<HTMLButtonElement>;

  for (const button of buttons) {
    button.addEventListener("click", () => handleClick(button));
  }

  function handleClick(button: HTMLButtonElement) {
    const value = button.dataset.value;

    switch (value) {
      case "=":
        mathOutput.innerText = "";
        predictAnswer();
        break;
      case "clear":
        mathInput.value = "";
        mathOutput.innerText = "";
        break;
      case "backspace":
        mathInput.value = mathInput.value.slice(0, -1);
        mathOutput.innerText = "";
        break;
      case "retry":
        mathOutput.innerText = "";
        predictAnswer();
        break;
      default:
        mathInput.value += value;
        mathOutput.innerText = "";
    }
    mathInput.focus();
  }
</script>

<style>
  #calculator {
    --calculatorWidth: 400px;

    @media (max-width: 460px) {
      --calculatorWidth: 100lvw;
    }

    --borderRadius: calc(var(--buttonBorderRadius) + var(--calculatorGap));
    --calculatorGap: calc(var(--calculatorWidth) / 25);

    --buttonGridWidth: calc(var(--calculatorWidth) - var(--calculatorGap) * 2);

    --buttonSize: calc((var(--buttonGridWidth) - var(--calculatorGap) * 3) / 4);
    --buttonBorderRadius: calc(var(--buttonSize) / 2);

    --shadowOffset: calc(var(--buttonSize) / 25);
    --blurRadius: calc(var(--shadowOffset) * 2);

    position: relative;

    width: var(--calculatorWidth);
    height: max(100lvh, calc(934 / 400 * var(--calculatorWidth)));
    margin: auto;
    padding: var(--calculatorGap);
    box-sizing: border-box;

    font-size: calc(var(--buttonSize) / 4);
    font-feature-settings: "tnum", "cv03", "cv04", "calt";

    @media (min-width: 461px) {
      margin-top: calc(var(--calculatorGap) * 2);
      margin-bottom: calc(var(--calculatorGap) * 2);

      border-radius: var(--borderRadius);

      box-shadow:
        var(--shadowOffset) var(--shadowOffset) var(--blurRadius)
          var(--darkShadowColor),
        calc(var(--shadowOffset) * -1) calc(var(--shadowOffset) * -1)
          var(--blurRadius) var(--lightShadowColor);

      & > .overlay {
        border-radius: var(--borderRadius);
      }
    }

    & > div.content {
      width: 100%;
      height: 100%;

      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: stretch;
    }
  }
</style>
